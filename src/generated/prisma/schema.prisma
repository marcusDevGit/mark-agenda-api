generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                 @id @default(autoincrement())
  name               String
  email              String              @unique
  password           String
  role               Role                @default(USER)
  creatadAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  appointments       Appointment[]
  subscription       Subscription[]
  ownedTeams         Team[]              @relation("TeamOwner")
  teamMemberships    TeamMember[]
  passwordResetToken passwordResetToken?
}

model Service {
  id           Int           @id @default(autoincrement())
  name         String
  descriptiom  String?
  duration     Int
  price        Float
  creatadAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
}

model Appointment {
  id        Int      @id @default(autoincrement())
  date      DateTime
  notes     String?
  userId    Int
  serviceId Int
  creatadAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  service   Service  @relation(fields: [serviceId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model passwordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expires   DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Team {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  ownerId     Int
  creatadAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  owner       User         @relation("TeamOwner", fields: [ownerId], references: [id])
  invites     TeamInvite[]
  members     TeamMember[]
}

model TeamMember {
  id        Int      @id @default(autoincrement())
  teamId    Int
  userId    Int
  role      TeamRole @default(MEMBER)
  creatadAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  team      Team     @relation(fields: [teamId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([teamId, userId])
}

model TeamInvite {
  id        Int          @id @default(autoincrement())
  teamId    Int
  email     String
  token     String       @unique
  status    InviteStatus @default(PENDING)
  expiresAt DateTime
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  team      Team         @relation(fields: [teamId], references: [id])
}

model Plan {
  id            Int            @id @default(autoincrement())
  name          String
  description   String?
  price         Float
  interval      PlanInterval   @default(MONTHLY)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  features      PlanFeature[]
  subscriptions Subscription[]
}

model PlanFeature {
  id          Int      @id @default(autoincrement())
  planId      Int
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  plan        Plan     @relation(fields: [planId], references: [id])
}

model Subscription {
  id        Int                @id @default(autoincrement())
  userId    Int
  planId    Int
  status    SubscriptionStatus @default(ACTIVE)
  startDate DateTime
  endDate   DateTime?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  plan      Plan               @relation(fields: [planId], references: [id])
  user      User               @relation(fields: [userId], references: [id])
}

enum Role {
  ADMIN
  USER
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum PlanInterval {
  MONTHLY
  YEARLY
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
}
